---
---

<script>
  // Define a more specific Window type for this script's context
  interface CustomWindow extends Window {
    toggleThemeAndIcons?: () => void;
    updateThemeIcons?: (isDark: boolean) => void;
  }
  // Tell TypeScript to use this custom type for 'window' in this module
  declare var window: CustomWindow;

  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Attempt to prevent scroll jump on refresh
  if ('scrollRestoration' in history) {
    history.scrollRestoration = 'manual';
  }

  function applyTheme(theme: string) { // Added type for theme parameter
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  // FunciÃ³n para alternar el tema y actualizar iconos
  window.toggleThemeAndIcons = function() {
    const currentTheme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    localStorage.setItem('color-theme', newTheme);
    applyTheme(newTheme);
    
    if (window.updateThemeIcons) {
      window.updateThemeIcons(newTheme === 'dark');
    }
  }
  document.addEventListener('DOMContentLoaded', function() {
    // GSAP and ScrollTrigger are already imported and registered statically arriba

    // Theme initialization
    const savedTheme = localStorage.getItem('color-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    let currentTheme = 'light';
    if (savedTheme) {
      currentTheme = savedTheme;
    } else if (prefersDark) {
      currentTheme = 'dark';
    }
    applyTheme(currentTheme); 
    localStorage.setItem('color-theme', currentTheme);    setTimeout(() => {
      if (window.updateThemeIcons) {
        window.updateThemeIcons(currentTheme === 'dark');
      } else {
        console.error("[CommonScripts] updateThemeIcons function not found at initial call time.");
      }
    }, 0);

    // Desplazamiento suave para enlaces internos
    document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor: HTMLAnchorElement) => {
      anchor.addEventListener('click', function (this: HTMLAnchorElement, e: MouseEvent) { 
        e.preventDefault();
        const hrefAttribute: string | null = this.getAttribute('href');
        if (hrefAttribute) {
          const target: Element | null = document.querySelector(hrefAttribute);
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });    // GSAP ScrollTrigger animations
    const animatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');

    animatedElements.forEach((el, index) => {
      gsap.fromTo(el, 
        { 
          opacity: 0,
          y: el.classList.contains('title-animate') ? 20 : 25, // Adjusted from 40 : 50
          scale: 0.95 // Adjusted from 0.9
        },
        {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: el.classList.contains('scroll-animate-fast') ? 0.8 : 1,          scrollTrigger: {
            trigger: el,
            start: "top bottom-=100px",
            toggleActions: "play none none none",
            once: true
          }
        }
      );
    });    const staggerContainers = document.querySelectorAll('.stagger-children');

    staggerContainers.forEach((container, index) => {
      const children = Array.from(container.children);
      gsap.fromTo(children, 
        { 
          opacity: 0, 
          y: 25, // Adjusted from 50
          scale: 0.95 // Adjusted from 0.9
        },
        {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 0.9,
          stagger: 0.1,          scrollTrigger: {
            trigger: container,
            start: "top bottom-=100px",
            toggleActions: "play none none none",
            once: true
          }
        }      );
    });
  });
</script>
