---
// Script centralizado para funcionalidades comunes
---

<script is:inline>
  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  // Función para alternar el tema y actualizar iconos
  window.toggleThemeAndIcons = function() {
    const currentTheme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    localStorage.setItem('color-theme', newTheme);
    applyTheme(newTheme);
    
    if (window.updateThemeIcons) {
      window.updateThemeIcons(newTheme === 'dark');
    }
  }
  // Inicializar tema e iconos al cargar la página
  document.addEventListener('DOMContentLoaded', function() {
    const savedTheme = localStorage.getItem('color-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    let currentTheme = 'light';

    if (savedTheme) {
      currentTheme = savedTheme;
    } else if (prefersDark) {
      currentTheme = 'dark';
    }
    
    applyTheme(currentTheme);
    localStorage.setItem('color-theme', currentTheme);
    if (window.updateThemeIcons) {
      window.updateThemeIcons(currentTheme === 'dark');
    }

    // Desplazamiento suave para enlaces internos
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    const staggeredParents = new Set();
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');
          if (entry.target.classList.contains('stagger-children') && !staggeredParents.has(entry.target)) {
            const children = entry.target.children;
            for (let i = 0; i < children.length; i++) {
              if (children[i] instanceof HTMLElement) {
                children[i].style.transitionDelay = `${i * 100}ms`;
              }
            }
            staggeredParents.add(entry.target);
          }
        } else {
          entry.target.classList.remove('in-view');
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observar elementos con .scroll-animate, .scroll-animate-fast, .stagger-children
    const elementsToAnimate = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .stagger-children, .title-animate');
    elementsToAnimate.forEach(el => {
      if (el.classList.contains('stagger-children')) {
        observer.observe(el);
      } else {
        observer.observe(el);
      }
    });

  });
</script>
