---
// Script centralizado para funcionalidades comunes
---

<script is:inline>
  // Function to apply the current theme
  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  // Combined function to toggle theme and update icons
  window.toggleThemeAndIcons = function() {
    const currentTheme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    localStorage.setItem('color-theme', newTheme);
    applyTheme(newTheme);
    
    // Call the globally available icon update function
    if (window.updateThemeIcons) {
      window.updateThemeIcons(newTheme === 'dark');
    }
  }

  // Initialize theme and icons on page load
  document.addEventListener('DOMContentLoaded', function() {
    const savedTheme = localStorage.getItem('color-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    let currentTheme = 'light'; // Default to light

    if (savedTheme) {
      currentTheme = savedTheme;
    } else if (prefersDark) {
      currentTheme = 'dark';
    }
    
    applyTheme(currentTheme);
    localStorage.setItem('color-theme', currentTheme); // Ensure localStorage is set

    // Update icons after theme is applied
    if (window.updateThemeIcons) {
      window.updateThemeIcons(currentTheme === 'dark');
    }

    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Intersection Observer for scroll animations
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1 // Trigger when 10% of the element is visible
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');
          // Apply stagger delay if the parent has .stagger-children
          if (entry.target.parentElement && entry.target.parentElement.classList.contains('stagger-children')) {
            // Calculate delay based on index, e.g., 100ms, 200ms, etc.
            // The delay can be adjusted by changing the multiplier (0.1 here for 100ms)
            entry.target.style.transitionDelay = `${index * 0.1}s`;
          }
          observer.unobserve(entry.target); // Optional: stop observing after animation
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observe elements with .scroll-animate or .scroll-animate-fast
    const elementsToAnimate = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .stagger-children');
    elementsToAnimate.forEach(el => {
      if (el.classList.contains('stagger-children')) {
        // For stagger-children, observe the parent, but apply delays to children
        observer.observe(el);
        // We will apply in-view to children when parent is in view
        // and transition-delay will handle the stagger
      } else {
        observer.observe(el);
      }
    });

  });
</script>
