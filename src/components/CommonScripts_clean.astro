---
---

<script>
  // Interfaz extendida para el objeto window con propiedades personalizadas
  interface CustomWindow extends Window {
    toggleThemeAndIcons?: () => void;
    updateThemeIcons?: (isDark: boolean) => void;
    lastScrollY?: number;
  }
  
  declare var window: CustomWindow;
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Prevenir salto de scroll al recargar la página
  if ('scrollRestoration' in history) {
    history.scrollRestoration = 'manual';
  }

  // Detección de dispositivos móviles
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
  
  // Variables globales para detección avanzada de scroll
  let scrollTimeout: ReturnType<typeof setTimeout>;
  let isScrollbarDrag = false;
  let isTouchScrolling = false;
  let isUserScrolling = false;
  let lastScrollTime = 0;
  let lastScrollPosition = 0;
  let animatedElementsSet = new Set(); // Elementos ya animados
  let scrollVelocityHistory: number[] = []; // Historial de velocidad de scroll
  let isWheelScrolling = false;
  let wheelTimeout: ReturnType<typeof setTimeout>;
  let touchTimeout: ReturnType<typeof setTimeout>;
  let consecutiveFastScrolls = 0;

  /**
   * Aplica el tema especificado al documento
   * @param {string} theme - El tema a aplicar ('dark' o 'light')
   */
  function applyTheme(theme: string) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  /**
   * Alterna entre tema oscuro y claro, actualizando los iconos correspondientes
   */
  window.toggleThemeAndIcons = function() {
    const currentTheme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    localStorage.setItem('color-theme', newTheme);
    applyTheme(newTheme);
    
    if (window.updateThemeIcons) {
      window.updateThemeIcons(newTheme === 'dark');
    }
  }

  /**
   * Inicializa las animaciones de ScrollTrigger para todos los elementos animados
   * Configura animaciones de entrada para elementos con clases específicas
   */
  function initScrollAnimations() {
    // Limpiar ScrollTriggers existentes
    ScrollTrigger.getAll().forEach(trigger => trigger.kill());
    
    // Configurar ScrollTrigger para mejor compatibilidad móvil
    ScrollTrigger.config({
      autoRefreshEvents: "visibilitychange,DOMContentLoaded,load,resize",
      ignoreMobileResize: true,
      syncInterval: 10 // Sincronización más rápida
    });
    
    // Animaciones GSAP con soporte mejorado para móviles
    const animatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');

    animatedElements.forEach((el, index) => {
      const htmlEl = el as HTMLElement;
      const isFast = el.classList.contains('scroll-animate-fast');
      const isTitle = el.classList.contains('title-animate');
      const isFooter = el.tagName.toLowerCase() === 'footer' || el.closest('footer');
      
      // Limpiar transiciones CSS que puedan interferir
      htmlEl.style.transition = 'none';
      htmlEl.style.transitionDelay = '0s';
      htmlEl.style.willChange = 'transform, opacity'; // Optimizar para animaciones
      
      // Estado inicial con GSAP - valores conservadores
      gsap.set(el, {
        opacity: 0,
        y: isFast ? 15 : isTitle ? 10 : 20, // Distancias reducidas para animaciones suaves
        scale: 0.99, // Escala más sutil
        visibility: 'visible',
        clearProps: 'transition,transition-delay'
      });

      // Crear animación con detección mejorada para móviles y scrollbar
      const scrollTriggerInstance = ScrollTrigger.create({
        trigger: el,
        start: isFooter ? "top 88%" : "top 80%",
        end: "bottom 20%",
        toggleActions: "play none none none",
        fastScrollEnd: 1000, // Incrementado para mejor detección de scrollbar
        preventOverlaps: true,
        refreshPriority: 1,
        onEnter: () => {
          if (!animatedElementsSet.has(el)) {
            animatedElementsSet.add(el);
            
            gsap.to(el, {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: isFast ? 0.5 : isTitle ? 0.7 : 0.9,
              ease: "power1.out",
              overwrite: "auto"
            });
          }
        },
        onUpdate: (self) => {
          // Forzar animación si el elemento está visible y el usuario hace scroll rápido
          if (self.isActive && (isUserScrolling || isTouchScrolling || isScrollbarDrag)) {
            if (!animatedElementsSet.has(el)) {
              animatedElementsSet.add(el);
              
              gsap.to(el, {
                opacity: 1,
                y: 0,
                scale: 1,
                duration: 0.6,
                ease: "power1.out",
                overwrite: "auto"
              });
            }
          }
        }
      });
    });

    // Animaciones escalonadas para contenedores - mejorado para móviles
    const staggerContainers = document.querySelectorAll('.stagger-children');

    staggerContainers.forEach((container, index) => {
      const children = Array.from(container.children);
      
      if (children.length > 0) {
        // Limpiar transiciones CSS para los hijos
        children.forEach(child => {
          const htmlChild = child as HTMLElement;
          htmlChild.style.transition = 'none';
          htmlChild.style.transitionDelay = '0s';
          htmlChild.style.willChange = 'transform, opacity';
        });
        
        // Estado inicial para los hijos - asegurar que empiecen ocultos
        gsap.set(children, {
          opacity: 0,
          y: 15, // Movimiento reducido
          scale: 0.99,
          visibility: 'visible',
          clearProps: 'transition,transition-delay'
        });
        
        ScrollTrigger.create({
          trigger: container,
          start: "top 85%",
          end: "bottom 20%",
          fastScrollEnd: 1000,
          preventOverlaps: true,
          onEnter: () => {
            gsap.to(children, {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.6,
              stagger: 0.05,
              ease: "power1.out",
              overwrite: "auto"
            });
          },
          onUpdate: (self) => {
            // Forzar animación si el contenedor está visible y el usuario hace scroll rápido
            if (self.isActive && (isUserScrolling || isTouchScrolling || isScrollbarDrag)) {
              gsap.to(children, {
                opacity: 1,
                y: 0,
                scale: 1,
                duration: 0.4,
                stagger: 0.03,
                ease: "power1.out",
                overwrite: "auto"
              });
            }
          }
        });
      }
    });

    // Actualizar ScrollTrigger después de la configuración
    ScrollTrigger.refresh();
  }

  /**
   * Maneja la inicialización del DOM cuando se carga el contenido
   * Configura el tema, animaciones y comportamientos de scroll suave
   */
  document.addEventListener('DOMContentLoaded', function() {
    // Inicialización del tema
    const savedTheme = localStorage.getItem('color-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    let currentTheme = 'light';
    if (savedTheme) {
      currentTheme = savedTheme;
    } else if (prefersDark) {
      currentTheme = 'dark';
    }
    applyTheme(currentTheme); 
    localStorage.setItem('color-theme', currentTheme);

    setTimeout(() => {
      if (window.updateThemeIcons) {
        window.updateThemeIcons(currentTheme === 'dark');
      }
    }, 0);

    // Scroll suave para enlaces internos
    document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor: HTMLAnchorElement) => {
      anchor.addEventListener('click', function (this: HTMLAnchorElement, e: MouseEvent) { 
        e.preventDefault();
        const hrefAttribute: string | null = this.getAttribute('href');
        if (hrefAttribute) {
          const target: Element | null = document.querySelector(hrefAttribute);
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });

    // Inicializar animaciones directamente sin animación de prueba
    setTimeout(() => {
      initScrollAnimations();
      
      // Verificación inicial para la sección de habilidades después de configurar animaciones
      setTimeout(() => {
        forceShowSkillsSection();
      }, 200);
      
      // Agregar Intersection Observer como respaldo adicional
      if ('IntersectionObserver' in window) {
        const observerOptions = {
          root: null,
          rootMargin: isMobile ? '20px' : '50px',
          threshold: isMobile ? 0.1 : 0.2
        };
        
        const intersectionObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && !animatedElementsSet.has(entry.target)) {
              const el = entry.target;
              const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
              
              if (currentOpacity < 0.5) {
                animatedElementsSet.add(el);
                gsap.killTweensOf(el);
                gsap.to(el, {
                  opacity: 1,
                  y: 0,
                  scale: 1,
                  duration: 0.8,
                  ease: "power1.out",
                  overwrite: "auto",
                  force3D: true
                });
              }
            }
          });
        }, observerOptions);

        // Observar todos los elementos animados
        setTimeout(() => {
          const elementsToObserve = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
          elementsToObserve.forEach(el => {
            intersectionObserver.observe(el);
          });
          
          // También observar contenedores stagger-children
          const staggerContainers = document.querySelectorAll('.stagger-children');
          staggerContainers.forEach(container => {
            intersectionObserver.observe(container);
            // También observar hijos individuales para mayor confiabilidad
            const children = Array.from(container.children);
            children.forEach(child => {
              intersectionObserver.observe(child);
            });
          });
        }, 500);
      }
    }, 100);
  });

  // Detectar scroll con rueda del mouse para diferenciarlo del arrastre de scrollbar
  window.addEventListener('wheel', () => {
    isWheelScrolling = true;
    isUserScrolling = true;
    clearTimeout(wheelTimeout);
    wheelTimeout = setTimeout(() => {
      isWheelScrolling = false;
      isUserScrolling = false;
    }, 150);
  }, { passive: true });

  // Detectar scroll táctil para dispositivos móviles
  window.addEventListener('touchstart', () => {
    isTouchScrolling = true;
    isUserScrolling = true;
    clearTimeout(touchTimeout);
  }, { passive: true });

  window.addEventListener('touchmove', () => {
    isTouchScrolling = true;
    isUserScrolling = true;
    clearTimeout(touchTimeout);
    touchTimeout = setTimeout(() => {
      isTouchScrolling = false;
      isUserScrolling = false;
    }, 200);
  }, { passive: true });

  window.addEventListener('touchend', () => {
    clearTimeout(touchTimeout);
    touchTimeout = setTimeout(() => {
      isTouchScrolling = false;
      isUserScrolling = false;
    }, 300);
  }, { passive: true });

  /**
   * Verifica y muestra elementos visibles - mejorado para todos los tipos de scroll
   * Anima elementos que están en el viewport pero aún no han sido animados
   */
  function checkVisibleElements() {
    const allAnimatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
    const windowHeight = window.innerHeight;
    let shownCount = 0;
    
    allAnimatedElements.forEach(el => {
      // Saltar si el elemento ya fue animado
      if (animatedElementsSet.has(el)) {
        return;
      }
      
      const rect = el.getBoundingClientRect();
      // Verificación más generosa del viewport para móviles y arrastre de scrollbar
      const triggerPoint = isMobile || isTouchScrolling ? 0.95 : 0.85;
      const isInViewport = rect.top < windowHeight * triggerPoint && rect.bottom > -50;
      const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
      
      // Mostrar elemento si está en viewport y está oculto
      if (isInViewport && currentOpacity < 0.1) {
        animatedElementsSet.add(el); // Marcar como animado
        shownCount++;
        
        // Eliminar animaciones existentes en este elemento para prevenir conflictos
        gsap.killTweensOf(el);
        
        gsap.to(el, {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: isTouchScrolling || isScrollbarDrag ? 0.6 : 0.8,
          ease: "power1.out",
          overwrite: "auto",
          force3D: true
        });
      }
    });
    
    // También verificar contenedores stagger-children específicamente
    const staggerContainers = document.querySelectorAll('.stagger-children');
    staggerContainers.forEach(container => {
      const rect = container.getBoundingClientRect();
      const isContainerInViewport = rect.top < windowHeight * 0.9 && rect.bottom > -50;
      
      if (isContainerInViewport) {
        const children = Array.from(container.children);
        children.forEach(child => {
          const childOpacity = parseFloat(window.getComputedStyle(child).opacity);
          if (childOpacity < 0.1) {
            shownCount++;
            
            gsap.killTweensOf(child);
            gsap.to(child, {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.6,
              ease: "power1.out",
              overwrite: "auto",
              force3D: true
            });
          }
        });
      }
    });
  }

  /**
   * Fuerza la visualización de todos los elementos visibles (para uso de scrollbar)
   * Aplica verificación muy generosa del viewport para arrastre de scrollbar
   */
  function forceShowVisibleElements() {
    const allAnimatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
    const windowHeight = window.innerHeight;
    let forcedCount = 0;

    allAnimatedElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      const rect = el.getBoundingClientRect();
      // Verificación muy generosa del viewport para arrastre de scrollbar
      const isInViewport = rect.top < windowHeight * 1.2 && rect.bottom > -windowHeight * 0.5;
      const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
      
      // Forzar mostrar cualquier elemento en viewport que no esté completamente visible
      if (isInViewport && currentOpacity < 0.95) {
        animatedElementsSet.add(el);
        forcedCount++;

        // Eliminar animaciones existentes para prevenir conflictos
        gsap.killTweensOf(el);

        gsap.to(el, {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 0.6,
          ease: "power1.out",
          overwrite: "auto",
          force3D: true
        });
      }
    });
    
    // También forzar mostrar contenedores stagger-children y sus hijos
    const staggerContainers = document.querySelectorAll('.stagger-children');
    staggerContainers.forEach(container => {
      const containerRect = container.getBoundingClientRect();
      const isContainerInViewport = containerRect.top < windowHeight * 1.2 && containerRect.bottom > -windowHeight * 0.5;
      
      if (isContainerInViewport) {
        const children = Array.from(container.children);
        children.forEach((child, index) => {
          const childOpacity = parseFloat(window.getComputedStyle(child).opacity);
          if (childOpacity < 0.95) {
            forcedCount++;
            
            gsap.killTweensOf(child);
            gsap.to(child, {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.6,
              delay: index * 0.05, // Pequeño retraso escalonado
              ease: "power1.out",
              overwrite: "auto",
              force3D: true
            });
          }
        });
      }
    });
  }

  /**
   * Función agresiva específicamente para elementos del fondo de la página
   * Muestra todos los elementos ocultos restantes cuando se está cerca del final
   */
  function forceShowBottomElements() {
    const currentY = window.pageYOffset;
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight;
    const distanceFromBottom = documentHeight - currentY - windowHeight;
    
    // Si estamos a menos de 400px del fondo, forzar mostrar TODOS los elementos ocultos restantes
    if (distanceFromBottom < 400) {
      const allAnimatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
      let bottomForcedCount = 0;
      
      allAnimatedElements.forEach(el => {
        const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
        
        if (currentOpacity < 0.95) {
          const htmlEl = el as HTMLElement;
          animatedElementsSet.add(el);
          bottomForcedCount++;
          
          gsap.killTweensOf(el);
          gsap.to(el, {
            opacity: 1,
            y: 0,
            scale: 1,
            duration: 0.8,
            ease: "power2.out",
            overwrite: "auto",
            force3D: true
          });
        }
      });
    }
  }

  /**
   * Función súper agresiva para el final de la página - muestra TODOS los elementos ocultos independientemente de la posición
   * Se ejecuta cuando se está muy cerca del final de la página
   */
  function forceShowAllRemainingElements() {
    const allAnimatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
    let remainingForcedCount = 0;
    
    allAnimatedElements.forEach(el => {
      const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
      
      if (currentOpacity < 0.9) {
        const htmlEl = el as HTMLElement;
        animatedElementsSet.add(el);
        remainingForcedCount++;
        
        gsap.killTweensOf(el);
        gsap.to(el, {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 1.0,
          ease: "power2.out",
          overwrite: "auto",
          force3D: true
        });
      }
    });
  }

  /**
   * Limpia animaciones incompletas que pueden haber quedado "atascadas"
   * Detecta elementos en viewport con opacidad parcial y los completa
   */
  function cleanupIncompleteAnimations() {
    const allAnimatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
    const windowHeight = window.innerHeight;
    
    allAnimatedElements.forEach(el => {
      const rect = el.getBoundingClientRect();
      const isInViewport = rect.top < windowHeight && rect.bottom > 0;
      const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
      
      // Si el elemento está en viewport pero tiene opacidad parcial (animación atascada)
      if (isInViewport && currentOpacity > 0 && currentOpacity < 0.9) {
        animatedElementsSet.add(el);
        
        gsap.killTweensOf(el);
        gsap.to(el, {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 0.5,
          ease: "power1.out",
          overwrite: "auto"
        });
      }
    });
  }

  /**
   * Fuerza la visualización específica de la sección de habilidades
   * Se enfoca en elementos técnicos y habilidades blandas
   */
  function forceShowSkillsSection() {
    // Dirigirse específicamente a la sección de habilidades
    const skillsSection = document.querySelector('#skills');
    if (!skillsSection) {
      return;
    }
    
    const windowHeight = window.innerHeight;
    const skillsRect = skillsSection.getBoundingClientRect();
    const isSkillsInView = skillsRect.top < windowHeight && skillsRect.bottom > 0;
    
    if (!isSkillsInView) {
      return;
    }
    
    // Forzar mostrar elementos de habilidades técnicas
    const skillItems = skillsSection.querySelectorAll('.skill-item');
    skillItems.forEach((item, index) => {
      const opacity = parseFloat(window.getComputedStyle(item).opacity);
      if (opacity < 0.9) {
        gsap.killTweensOf(item);
        gsap.to(item, {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 0.5,
          delay: index * 0.05,
          ease: "power1.out",
          overwrite: "auto",
          force3D: true
        });
      }
    });
    
    // Forzar mostrar tarjetas de habilidades blandas
    const softSkillCards = skillsSection.querySelectorAll('.soft-skill-card');
    softSkillCards.forEach((card, index) => {
      const opacity = parseFloat(window.getComputedStyle(card).opacity);
      if (opacity < 0.9) {
        gsap.killTweensOf(card);
        gsap.to(card, {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 0.6,
          delay: index * 0.1,
          ease: "power1.out",
          overwrite: "auto",
          force3D: true
        });
      }
    });
  }

  /**
   * Manejo mejorado de scroll con detección avanzada para móviles y scrollbar
   * Detecta diferentes tipos de scroll y aplica animaciones apropiadas
   */
  window.addEventListener('scroll', () => {
    const currentTime = Date.now();
    const currentScrollY = window.pageYOffset;
    const scrollDelta = Math.abs(currentScrollY - lastScrollPosition);
    const timeDelta = currentTime - lastScrollTime;
    
    // Calcular velocidad de scroll
    const velocity = timeDelta > 0 ? scrollDelta / timeDelta : 0;
    
    // Agregar al historial de velocidad (mantener últimas 5 mediciones)
    scrollVelocityHistory.push(velocity);
    if (scrollVelocityHistory.length > 5) {
      scrollVelocityHistory.shift();
    }
    
    // Métodos de detección mejorados para diferentes tipos de scroll
    const isLargeJump = scrollDelta > 80 && timeDelta < 100; // Umbral reducido
    const isVeryLargeJump = scrollDelta > 150; // Umbral reducido
    const isHighVelocity = velocity > 2; // Umbral reducido
    const isNotWheelScroll = !isWheelScrolling;
    const isMobileTouch = isMobile && isTouchScrolling;
    
    // Detección mejorada para arrastre de scrollbar o scroll rápido móvil
    if ((isLargeJump && isNotWheelScroll) || isVeryLargeJump || (isHighVelocity && isNotWheelScroll) || isMobileTouch) {
      isScrollbarDrag = true;
      isUserScrolling = true;
      consecutiveFastScrolls++;
      
      // Verificar inmediatamente y mostrar elementos visibles durante scroll rápido
      checkVisibleElements();
    } else {
      // Resetear contador consecutivo si el scroll es normal
      if (velocity < 1) {
        consecutiveFastScrolls = 0;
        if (!isTouchScrolling && !isWheelScrolling) {
          isScrollbarDrag = false;
          isUserScrolling = false;
        }
      }
    }
    
    lastScrollPosition = currentScrollY;
    lastScrollTime = currentTime;
    
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(() => {
      const currentY = window.pageYOffset;
      
      // Calcular velocidad promedio del historial
      const averageVelocity = scrollVelocityHistory.length > 0 
        ? scrollVelocityHistory.reduce((sum, v) => sum + v, 0) / scrollVelocityHistory.length 
        : 0;
      
      // Múltiples condiciones para activar forzar mostrar
      const atBottom = (document.documentElement.scrollHeight - currentY - window.innerHeight) < 150;
      const nearBottom = (document.documentElement.scrollHeight - currentY - window.innerHeight) < 300;
      const veryNearBottom = (document.documentElement.scrollHeight - currentY - window.innerHeight) < 50;
      
      // Detección mejorada para diferentes tipos de scroll
      const hadScrollbarActivity = isScrollbarDrag || consecutiveFastScrolls >= 2;
      const hasHighVelocity = averageVelocity > 1.5; // Umbral reducido
      const isMobileTouchActive = isMobile && isTouchScrolling;
      const isAnyFastScroll = hadScrollbarActivity || hasHighVelocity || isMobileTouchActive;
      
      // Activar forzar mostrar en múltiples escenarios
      if (isAnyFastScroll || atBottom || nearBottom) {
        forceShowVisibleElements();
        if (nearBottom) {
          forceShowBottomElements();
        }
        
        // Refrescar ScrollTrigger para capturar triggers perdidos
        ScrollTrigger.refresh();
      }
      
      // Verificación súper agresiva cuando está muy cerca del fondo
      if (veryNearBottom) {
        forceShowAllRemainingElements();
      }

      // Siempre verificar elementos visibles después de que termina el scroll
      checkVisibleElements();

      // Verificación específica para la sección de habilidades
      forceShowSkillsSection();

      // Verificación agresiva específica para footer y secciones del fondo
      if (currentY + window.innerHeight >= document.documentElement.scrollHeight - 200) {
        forceShowBottomElements();
      }

      // Lógica específica del footer
      if (currentY + window.innerHeight >= document.documentElement.scrollHeight - 100) {
        const footer = document.querySelector('footer');
        if (footer && !animatedElementsSet.has(footer)) {
          const footerOpacity = parseFloat(window.getComputedStyle(footer).opacity);
          if (footerOpacity < 0.5) {
            animatedElementsSet.add(footer);
            gsap.to(footer, {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.5,
              ease: "power1.out"
            });
          }
        }
      }
    }, isTouchScrolling ? 50 : 30); // Respuesta más rápida para touch
  }, { passive: true });

  // Detección adicional de final de scroll para máxima confiabilidad
  let scrollEndTimeout: ReturnType<typeof setTimeout>;
  window.addEventListener('scroll', () => {
    clearTimeout(scrollEndTimeout);
    scrollEndTimeout = setTimeout(() => {
      // Cuando el scroll definitivamente termina, asegurar que todos los elementos visibles se muestren
      checkVisibleElements();
      forceShowBottomElements();
      
      // Verificación extra agresiva para el fondo de la página
      const currentY = window.pageYOffset;
      const distanceFromBottom = document.documentElement.scrollHeight - currentY - window.innerHeight;
      if (distanceFromBottom < 100) {
        forceShowAllRemainingElements();
      }
    }, 200);
  }, { passive: true });

  // Evento de carga de ventana
  window.addEventListener('load', () => {
    setTimeout(() => {
      ScrollTrigger.refresh();
      checkVisibleElements(); // Verificación inicial después de la carga
      
      // Limpiar animaciones incompletas después de un breve retraso
      setTimeout(() => {
        cleanupIncompleteAnimations();
      }, 1000);
    }, 200);
  });

  /**
   * Verificación de respaldo con soporte mejorado para móviles y scrollbar
   * Se ejecuta periódicamente para capturar elementos perdidos
   */
  setInterval(() => {
    // Solo ejecutar si no está actualmente en scroll activo
    const timeSinceLastScroll = Date.now() - lastScrollTime;
    const isQuiet = timeSinceLastScroll > 1000; // Reducido de 2000
    
    if (isQuiet || isMobile) { // Siempre ejecutar en móvil
      const allAnimatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-fast, .title-animate');
      const windowHeight = window.innerHeight;
      let foundMissedElements = false;
      
      allAnimatedElements.forEach(el => {
        if (!animatedElementsSet.has(el)) {
          const rect = el.getBoundingClientRect();
          // Verificación más generosa del viewport para móviles
          const viewportThreshold = isMobile ? 0.9 : 0.8;
          const isInViewport = rect.top < windowHeight * viewportThreshold && rect.bottom > 0;
          const currentOpacity = parseFloat(window.getComputedStyle(el).opacity);
          
          if (isInViewport && currentOpacity < 0.1) {
            foundMissedElements = true;
            animatedElementsSet.add(el);
            
            gsap.killTweensOf(el);
            gsap.to(el, {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: isMobile ? 0.6 : 1.0,
              ease: "power1.out",
              overwrite: "auto",
              force3D: true
            });
          }
        }
      });
      
      // También verificar contenedores stagger-children
      const staggerContainers = document.querySelectorAll('.stagger-children');
      staggerContainers.forEach(container => {
        const rect = container.getBoundingClientRect();
        const isContainerInViewport = rect.top < windowHeight * 0.9 && rect.bottom > 0;
        
        if (isContainerInViewport) {
          const children = Array.from(container.children);
          children.forEach((child, index) => {
            const childOpacity = parseFloat(window.getComputedStyle(child).opacity);
            if (childOpacity < 0.1) {
              foundMissedElements = true;
              
              gsap.killTweensOf(child);
              gsap.to(child, {
                opacity: 1,
                y: 0,
                scale: 1,
                duration: isMobile ? 0.6 : 1.0,
                delay: index * 0.05,
                ease: "power1.out",
                overwrite: "auto",
                force3D: true
              });
            }
          });
        }
      });
      
      if (foundMissedElements) {
        ScrollTrigger.refresh();
      }
    }
  }, isMobile ? 1500 : 2500); // Verificaciones más frecuentes en móvil

  // Mejoras específicas para móviles
  if (isMobile) {
    // Manejo adicional de eventos táctiles para iOS Safari
    let touchStartY = 0;
    let touchEndY = 0;
    
    window.addEventListener('touchstart', (e) => {
      touchStartY = e.touches[0].clientY;
    }, { passive: true });
    
    window.addEventListener('touchend', (e) => {
      touchEndY = e.changedTouches[0].clientY;
      const touchDistance = Math.abs(touchEndY - touchStartY);
      
      // Si ocurrió un scroll táctil significativo, verificar elementos perdidos
      if (touchDistance > 50) {
        setTimeout(() => {
          checkVisibleElements();
          forceShowVisibleElements();
        }, 100);
      }
    }, { passive: true });
    
    // Verificación inicial móvil después de un retraso
    setTimeout(() => {
      checkVisibleElements();
      forceShowVisibleElements();
    }, 1000);
  }
</script>
