---
import type { SkillEntry, TechnicalSkillEntry, SoftSkillEntry, SkillCategory, TranslatedString } from "../types/portfolio";
import type { Locale } from "../utils/translations";

interface Props {
  title: string;
  skills: SkillEntry[];
  categories: { id: SkillCategory; name: string }[];
  softSkillsTitle: string;
  technicalSkillsTitle: string;
  currentLocale: Locale;
}

const { title, skills, categories, softSkillsTitle, technicalSkillsTitle, currentLocale } = Astro.props;

const technicalSkills = skills.filter(
  (skill) => skill.type === "technical"
) as TechnicalSkillEntry[];
const softSkills = skills.filter(
  (skill) => skill.type === "soft"
) as SoftSkillEntry[];

const techColorMap: Record<string, { bg: string; text: string }> = {
  HTML: { bg: "#E34F26", text: "text-white" },
  CSS: { bg: "#1572B6", text: "text-white" },
  JavaScript: { bg: "#F7DF1E", text: "text-black" },
  TypeScript: { bg: "#3178C6", text: "text-white" },
  Angular: { bg: "#DD0031", text: "text-white" },
  React: { bg: "#61DAFB", text: "text-black" },
  ".NET": { bg: "#512BD4", text: "text-white" },
  Java: { bg: "#007396", text: "text-white" },
  "Node.js": { bg: "#339933", text: "text-white" },
  MongoDB: { bg: "#47A248", text: "text-white" },
  "SQL Server": { bg: "#CC2927", text: "text-white" },
  Firebase: { bg: "#FFCA28", text: "text-black" },
  Tailwindcss: { bg: "#06B6D4", text: "text-black" },
  Bootstrap: { bg: "#7952B3", text: "text-white" },
  Astro: { bg: "#FF5D01", text: "text-white" },
  "Next.js": { bg: "#000000", text: "text-white" },
  "Azure DevOps": { bg: "#0078D4", text: "text-white" },
  GitHub: { bg: "#181717", text: "text-white" },
  Git: { bg: "#F05032", text: "text-white" },
  Docker: { bg: "#2496ED", text: "text-white" },
  "Oracle SQL": { bg: "#F80000", text: "text-white" },
  "PL/SQL": { bg: "#F80000", text: "text-white" },
  "C#": { bg: "#239120", text: "text-white" },
  C: { bg: "#A8B9CC", text: "text-black" },
  Figma: { bg: "#F24E1E", text: "text-white" },
  "Angular Material": { bg: "#DD0031", text: "text-white" },
  default: {
    bg: "bg-light-tag-bg dark:bg-dark-tag-bg",
    text: "text-light-text dark:text-dark-text",
  },
};

const hexToRgba = (hex: string, alpha: number = 1): string => {
  let r = 0,
    g = 0,
    b = 0;
  const hexValue = hex.startsWith("#") ? hex.slice(1) : hex;

  if (hexValue.length === 3) {
    r = parseInt(hexValue[0] + hexValue[0], 16);
    g = parseInt(hexValue[1] + hexValue[1], 16);
    b = parseInt(hexValue[2] + hexValue[2], 16);
  } else if (hexValue.length === 6) {
    r = parseInt(hexValue.slice(0, 2), 16);
    g = parseInt(hexValue.slice(2, 4), 16);
    b = parseInt(hexValue.slice(4, 6), 16);
  } else {
    return `rgba(0,0,0,0)`;
  }
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const getSkillStyles = (skillName: string) => {
  const normalizedSkillKey = Object.keys(techColorMap).find(
    (key) => key.toLowerCase() === skillName.toLowerCase() && key !== "default"
  );
  const styleInfo = normalizedSkillKey
    ? techColorMap[normalizedSkillKey]
    : techColorMap["default"];

  const opacityValue = 0.6; 
  const opacityClassSuffix = "60";

  let bgColorStyle = "";
  let bgClass = "";

  if (styleInfo.bg.startsWith("#")) {
    bgColorStyle = `background-color: ${hexToRgba(styleInfo.bg, opacityValue)};`;
  } else {
    const classes = styleInfo.bg.split(" ");
    bgClass = classes
      .map((cls) => `${cls}/${opacityClassSuffix}`)
      .join(" ");
  }

  return {
    bgColorStyle: bgColorStyle,
    bgClass: bgClass,
    textClass: styleInfo.text,
  };
};
---

<section id="skills-section" class="max-w-6xl mx-auto px-6 py-8 md:py-16 scroll-animate">
  <div>
    <header class="scroll-animate-fast">
      <h2
        class="text-3xl md:text-4xl font-bold text-light-text dark:text-dark-text mb-8 title-animate"
      >
        {title}
      </h2>
    </header>

    <div class="mb-12">
      <h3 class="text-2xl font-semibold text-light-text dark:text-dark-text mb-6">
        {technicalSkillsTitle}
      </h3>
      <div class="flex flex-wrap gap-4 mb-8" id="skill-filters">
        <button
          data-filter="all"
          class="filter-button active px-4 py-2 rounded-md text-sm font-medium transition-colors duration-300 bg-light-accent dark:bg-dark-accent text-white"
        >
          Todas
        </button>
        {categories.map((category) => (
          <button
            data-filter={category.id}
            class="filter-button px-4 py-2 rounded-md text-sm font-medium transition-colors duration-300 bg-light-tag-bg dark:bg-dark-tag-bg text-light-text dark:text-dark-text hover:bg-light-accent hover:dark:bg-dark-accent hover:text-white cursor-pointer"
          >
            {category.name}
          </button>
        ))}
      </div>
      <div class="flex flex-wrap gap-3 skills-container">
        {technicalSkills.map((skill) => {
          const { bgColorStyle, bgClass, textClass } = getSkillStyles(skill.name);
          return (
            <div
              class={`skill-item ${bgClass} ${textClass} px-3 py-1 rounded-md text-xs font-medium shadow-md transition-all duration-200 ease-in-out transform hover:scale-105`}
              style={bgColorStyle}
              data-category={skill.category}
            >
              {skill.name}
            </div>
          );
        })}
      </div>
    </div>

    <div>
      <h3 class="text-2xl font-semibold text-light-text dark:text-dark-text mb-8">
        {softSkillsTitle}
      </h3>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {softSkills.map((skill) => (
          <div class="bg-light-card dark:bg-gray-800/50 p-6 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 ease-in-out flex flex-col h-full">
            <h4 class="text-lg font-semibold text-light-heading dark:text-dark-heading mb-2">{skill.name[currentLocale]}</h4>
            {skill.description && <p class="text-sm text-light-text dark:text-dark-text flex-grow">{skill.description[currentLocale]}</p>}
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const filterButtons = document.querySelectorAll(".filter-button");
    const skillItems = document.querySelectorAll(".skill-item") as NodeListOf<HTMLElement>;
    const skillsContainer = document.querySelector(".skills-container") as HTMLElement | null;

    if (!skillsContainer) return;

    const animateItems = (itemsToShow: HTMLElement[], itemsToHide: HTMLElement[]) => {
      // Stagger hiding animation
      itemsToHide.forEach((item, index) => {
        setTimeout(() => {
          item.style.transform = 'scale(0.5)';
          item.style.opacity = '0';
          setTimeout(() => {
            item.style.display = 'none';
          }, 150); // Corresponds to half of the transition duration
        }, index * 50); // Stagger delay
      });

      // Stagger showing animation
      setTimeout(() => {
        const fragment = document.createDocumentFragment();
        itemsToShow.forEach(item => {
            item.style.display = ''; // Reset display before appending
            fragment.appendChild(item);
        });
        skillsContainer.innerHTML = ''; // Clear container
        skillsContainer.appendChild(fragment); // Append all at once

        itemsToShow.forEach((item, index) => {
            // Force reflow/repaint before animation for items that were 'display: none'
            // Accessing offsetHeight is a common trick to trigger reflow
            void item.offsetHeight;
            setTimeout(() => {
                item.style.transform = 'scale(1)';
                item.style.opacity = '1';
            }, index * 70 + 50); // Stagger delay for showing
        });
      }, itemsToHide.length > 0 ? (itemsToHide.length * 50 + 150 + 50) : 50);
    };

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const filterValue = button.getAttribute("data-filter");

        filterButtons.forEach(btn => btn.classList.remove("active", "bg-light-accent", "dark:bg-dark-accent", "text-white"));
        filterButtons.forEach(btn => {
            if (btn !== button) {
                btn.classList.add("bg-light-tag-bg", "dark:bg-dark-tag-bg", "text-light-text", "dark:text-dark-text", "hover:bg-light-accent", "hover:dark:bg-dark-accent", "hover:text-white");
                btn.classList.remove("active", "bg-light-accent", "dark:bg-dark-accent", "text-white");
            } else {
                btn.classList.add("active", "bg-light-accent", "dark:bg-dark-accent", "text-white");
                btn.classList.remove("bg-light-tag-bg", "dark:bg-dark-tag-bg", "text-light-text", "dark:text-dark-text");
            }
        });

        const itemsToShow: HTMLElement[] = [];
        const itemsToHide: HTMLElement[] = [];

        skillItems.forEach((item) => {
          const itemCategory = item.dataset.category;
          if (filterValue === "all" || itemCategory === filterValue) {
            itemsToShow.push(item);
          } else {
            itemsToHide.push(item);
          }
        });
        
        animateItems(itemsToShow, itemsToHide);
      });
    });

    // Initial animation for all items if "All" is default
    const initialActiveFilterButton = document.querySelector('.filter-button.active');
    const initialFilter = initialActiveFilterButton ? initialActiveFilterButton.getAttribute('data-filter') : 'all';

    if (initialFilter === 'all') {
        const allItemsInitially = Array.from(skillItems);
        // Temporarily hide all, then animate in
        allItemsInitially.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'scale(0.5)';
            item.style.display = ''; // Ensure display is not none
        });
        
        // Force reflow before starting animation
        if (skillsContainer) void skillsContainer.offsetHeight;

        allItemsInitially.forEach((item, index) => {
            setTimeout(() => {
                item.style.opacity = '1';
                item.style.transform = 'scale(1)';
            }, index * 70 + 100); // Stagger delay
        });
    } else {
      // Handle if a different filter is active by default (e.g. from query param)
      // This part can be expanded if needed.
       const itemsToShow: HTMLElement[] = [];
       const itemsToHide: HTMLElement[] = [];
       skillItems.forEach((item) => {
          const itemCategory = item.dataset.category;
          if (itemCategory === initialFilter) {
            itemsToShow.push(item);
          } else {
            itemsToHide.push(item);
          }
        });
        animateItems(itemsToShow, itemsToHide);
    }
  });
</script>

<style>
  .skill-item {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out, background-color 0.3s ease-in-out;
  }
</style>
