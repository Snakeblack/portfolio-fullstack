---
import type { SkillEntry, TechnicalSkillEntry, SoftSkillEntry, SkillCategory, TranslatedString } from "../types/portfolio";
import type { Locale } from "../utils/translations";

interface Props {
  title: string;
  skills: SkillEntry[];
  categories: { id: SkillCategory; name: string }[];
  softSkillsTitle: string;
  technicalSkillsTitle: string;
  currentLocale: Locale;
}

const { title, skills, categories, softSkillsTitle, technicalSkillsTitle, currentLocale } = Astro.props;

const technicalSkills = skills.filter(
  (skill) => skill.type === "technical"
) as TechnicalSkillEntry[];
const softSkills = skills.filter(
  (skill) => skill.type === "soft"
) as SoftSkillEntry[];

const techColorMap: Record<string, { bg: string; text: string; border?: string }> = {
  HTML: { bg: "#E34F26", text: "text-white" },
  CSS: { bg: "#1572B6", text: "text-white" },
  JavaScript: { bg: "#F7DF1E", text: "text-black" },
  TypeScript: { bg: "#3178C6", text: "text-white" },
  Angular: { bg: "#DD0031", text: "text-white" },
  React: { bg: "#61DAFB", text: "text-black" },
  ".NET": { bg: "#512BD4", text: "text-white" },
  Java: { bg: "#007396", text: "text-white" },
  "Node.js": { bg: "#339933", text: "text-white" },
  MongoDB: { bg: "#47A248", text: "text-white" },
  "SQL Server": { bg: "#CC2927", text: "text-white" },
  Firebase: { bg: "#FFCA28", text: "text-black" },
  Tailwindcss: { bg: "#06B6D4", text: "text-black" }, // Matched case from data
  Bootstrap: { bg: "#7952B3", text: "text-white" },
  Astro: { bg: "#FF5D01", text: "text-white" },
  "Next.js": { bg: "#000000", text: "text-white" },
  "Azure DevOps": { bg: "#0078D4", text: "text-white" },
  GitHub: { bg: "#181717", text: "text-white" },
  Git: { bg: "#F05032", text: "text-white" },
  Docker: { bg: "#2496ED", text: "text-white" },
  "Oracle SQL": { bg: "#F80000", text: "text-white" },
  "PL/SQL": { bg: "#F80000", text: "text-white" },
  "C#": { bg: "#239120", text: "text-white" },
  C: { bg: "#A8B9CC", text: "text-black" },
  Figma: { bg: "#F24E1E", text: "text-white" },
  "Angular Material": { bg: "#DD0031", text: "text-white" },
  default: {
    bg: "bg-light-card-bg dark:bg-dark-card-bg", // Changed to card-bg for default
    text: "text-light-text dark:text-dark-text",
    border: "border border-light-border dark:border-dark-border" // Added border for default
  },
};

const hexToRgba = (hex: string, alpha: number = 1): string => {
  let r = 0, g = 0, b = 0;
  const hexValue = hex.startsWith("#") ? hex.slice(1) : hex;
  if (hexValue.length === 3) {
    r = parseInt(hexValue[0] + hexValue[0], 16);
    g = parseInt(hexValue[1] + hexValue[1], 16);
    b = parseInt(hexValue[2] + hexValue[2], 16);
  } else if (hexValue.length === 6) {
    r = parseInt(hexValue.slice(0, 2), 16);
    g = parseInt(hexValue.slice(2, 4), 16);
    b = parseInt(hexValue.slice(4, 6), 16);
  } else {
    return `rgba(0,0,0,0)`;
  }
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const getSkillStyles = (skillName: string) => {
  const normalizedSkillKey = Object.keys(techColorMap).find(
    (key) => key.toLowerCase() === skillName.toLowerCase() && key !== "default"
  );
  const styleInfo = normalizedSkillKey
    ? techColorMap[normalizedSkillKey]
    : techColorMap["default"];

  const solidOpacityForTextContrast = 0.85; 

  let bgColorStyle = "";
  let bgClass = ""; 
  let finalBorderClass = styleInfo.border || "";

  if (styleInfo.bg.startsWith("#")) {
    bgColorStyle = `background-color: ${hexToRgba(styleInfo.bg, solidOpacityForTextContrast)};`;
  } else {
    bgClass = styleInfo.bg;
  }
  
  return {
    bgColorStyle: bgColorStyle,
    bgClass: bgClass,
    textClass: styleInfo.text,
    borderClass: finalBorderClass
  };
};

---

<section id="skills" class="max-w-6xl mx-auto px-6 py-8 md:py-16 scroll-animate scroll-mt-20">
  <header class="text-center scroll-animate-fast">
    <h2 class="text-3xl md:text-4xl font-bold text-light-text dark:text-dark-text mb-12 md:mb-16 title-animate">
      {title}
    </h2>
  </header>

  <div class="scroll-animate-fast" style="transition-delay: 0.1s;">
    <h3 class="text-2xl md:text-3xl font-semibold text-light-text dark:text-dark-text mb-8 text-center md:text-left title-animate">
      {technicalSkillsTitle}
    </h3>
    <div class="flex flex-wrap justify-center md:justify-start gap-3 md:gap-4 mb-12 md:mb-16 stagger-children">
      {technicalSkills.map((skill, index) => {
        const { bgColorStyle, bgClass, textClass, borderClass } = getSkillStyles(skill.name);
        return (
          <div
            style={bgColorStyle}
            class={`skill-item ${bgClass} ${textClass} ${borderClass} px-4 py-2 rounded-lg text-sm font-medium shadow-md hover:shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105`}
            data-category={skill.category}
          >
            {/* Keep data-category if used for filtering, though not implemented here */}
            {skill.name}
          </div>
        );
      })}
    </div>
  </div>

  <div class="scroll-animate-fast" style="transition-delay: 0.2s;">
    <h3 class="text-2xl md:text-3xl font-semibold text-light-text dark:text-dark-text mb-8 text-center md:text-left title-animate">
      {softSkillsTitle}
    </h3>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 stagger-children">
      {softSkills.map((skill, index) => {
        const skillName = typeof skill.name === 'string' ? skill.name : skill.name[currentLocale as keyof TranslatedString];
        const skillDescription = skill.description 
          ? (typeof skill.description === 'string' ? skill.description : skill.description[currentLocale as keyof TranslatedString]) 
          : '';
        return (
          <article 
            class="soft-skill-card bg-light-card-bg dark:bg-dark-card-bg p-6 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 ease-in-out transform hover:scale-105 hover:-translate-y-1"
            style={`transition-delay: ${index * 50}ms;`}
          >
            <h4 class="text-lg font-semibold text-light-accent dark:text-dark-accent mb-2.5">{skillName}</h4>
            {skillDescription && (
              <p class="text-sm text-light-subtext dark:text-dark-subtext text-balance leading-relaxed">
                {skillDescription}
              </p>
            )}
          </article>
        );
      })}
    </div>
  </div>
</section>

<style>
  .skill-item {
    line-height: 1.25; /* Ensure consistent line height */
  }
  .soft-skill-card {
    /* Add any specific styles for soft skill cards if needed */
  }
</style>
