---
---

<button 
  id="theme-toggle"
  class="p-2 rounded-lg text-light-subtext dark:text-dark-subtext hover:text-light-accent dark:hover:text-dark-accent hover:bg-light-card-bg dark:hover:bg-dark-card-bg transform hover:scale-110 transition-all duration-300 ease-in-out cursor-pointer"
  aria-label="Toggle theme"
>  
  <svg id="theme-toggle-light-icon" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
    <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
  </svg>
  <svg id="theme-toggle-dark-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
  </svg>
</button>

<script is:inline>
  const themeToggle = document.getElementById('theme-toggle');
  const lightIcon = document.getElementById('theme-toggle-light-icon');
  const darkIcon = document.getElementById('theme-toggle-dark-icon');
  const htmlElement = document.documentElement;

  function updateIcons(isDark) {
    if (lightIcon && darkIcon) {
      lightIcon.style.display = isDark ? 'block' : 'none';
      darkIcon.style.display = isDark ? 'none' : 'block';
    }
  }

  // Cargar el tema guardado o el preferido por el sistema y actualizar iconos
  const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  htmlElement.classList.toggle('dark', savedTheme === 'dark');
  updateIcons(savedTheme === 'dark');
  // Asegurarse de que el evento themeChanged se dispare al cargar para que WebGLBackground lo coja
  document.dispatchEvent(new CustomEvent('themeChanged')); 


  themeToggle?.addEventListener('click', () => {
    htmlElement.classList.toggle('dark');
    const isDark = htmlElement.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    updateIcons(isDark);
    // Disparar evento personalizado para notificar el cambio de tema
    document.dispatchEvent(new CustomEvent('themeChanged'));
  });

  // Escuchar cambios en las preferencias del sistema
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
    // Solo aplicar si no hay un tema guardado expl√≠citamente por el usuario
    if (localStorage.getItem('theme') === null) { 
      const isDark = e.matches;
      htmlElement.classList.toggle('dark', isDark);
      updateIcons(isDark);
      document.dispatchEvent(new CustomEvent('themeChanged'));
    }
  });
</script>
