---
interface Props {
  greeting: string;
  name: string;
  description: string;
  sleepingMessage: string;
  email: string;
  getInTouchText: string;
}

const { greeting, name, description, sleepingMessage, email, getInTouchText } = Astro.props;
---

<section id="hero-animation-container" class="max-w-6xl mx-auto px-6 py-8 md:py-16 lg:py-24 scroll-animate">
  <header class="scroll-animate-fast">
    <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-light-text dark:text-dark-text mb-6 leading-tight text-pretty">
      {greeting} <span class="text-light-accent dark:text-dark-accent">{name}</span>
    </h1>
  </header>
  
  <p class="text-xl md:text-2xl text-light-subtext dark:text-dark-subtext mb-8 leading-relaxed scroll-animate-fast text-balance" style="transition-delay: 0.1s;">
    {description}
  </p>

  <div id="status-container" class="flex flex-col sm:flex-row items-start gap-6 mb-8 scroll-animate-fast" style="transition-delay: 0.2s;">
    <div id="sleeping-message-container" class="items-center gap-2 text-sm text-light-subtext dark:text-dark-subtext text-pretty" style="display: none;">
      <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse inline-block"></div>
      <span>{sleepingMessage}</span>
    </div>
    
    <a 
      href={`mailto:${email}?subject=Project Discussion Opportunity`}
      class="inline-flex items-center gap-2 text-sm font-medium text-light-accent dark:text-dark-accent hover:text-light-accent-hover dark:hover:text-dark-accent-hover transition-colors text-pretty"
    >
      <span>{getInTouchText}</span>
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
      </svg>
    </a>
  </div>

  <div class="scroll-animate-fast" style="transition-delay: 0.3s;">
    <slot />
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const madridTime = new Date().toLocaleTimeString('en-US', { timeZone: 'Europe/Madrid', hour12: false });
    const hour = parseInt(madridTime.split(':')[0]);
    const sleepingMessageContainer = document.getElementById('sleeping-message-container');
    const statusContainer = document.getElementById('status-container');

    if (sleepingMessageContainer && statusContainer) {
      if (hour >= 22 || hour < 7) {
        sleepingMessageContainer.style.display = 'flex';
      }
    }
  });
</script>
