---
import { getTranslations, type Locale } from '../utils/translations';

interface ProjectItem {
  name: string;
  description: { [key: string]: string };
  url: string;
  technologies?: string[];
  year: string;
  screenshot?: string;
}

interface Props {
  title: string;
  projects: ProjectItem[];
  currentLocale: string;
  viewAllText: string;
  maxProjects?: number;
}

const { title, projects, currentLocale, maxProjects: initialMaxProjects = 3 } = Astro.props;
const t = getTranslations(currentLocale as Locale);

const showAll = Astro.url.searchParams.get('show_all') === 'true';

const buttonText = showAll ? t.actions.viewLess : t.actions.viewAll;
const showAllId = `show-all-projects-btn`;

const techColorMap: Record<string, { bg: string; text: string }> = {
  HTML: { bg: "#E34F26", text: "text-white" },
  CSS: { bg: "#1572B6", text: "text-white" },
  JavaScript: { bg: "#F7DF1E", text: "text-black" },
  TypeScript: { bg: "#3178C6", text: "text-white" },
  Angular: { bg: "#DD0031", text: "text-white" },
  React: { bg: "#61DAFB", text: "text-black" },
  ".NET": { bg: "#512BD4", text: "text-white" },
  Java: { bg: "#007396", text: "text-white" },
  "Node.js": { bg: "#339933", text: "text-white" },
  MongoDB: { bg: "#47A248", text: "text-white" },
  "SQL Server": { bg: "#CC2927", text: "text-white" },
  MySQL: { bg: "#4479A1", text: "text-white" },
  Firebase: { bg: "#FFCA28", text: "text-black" },
  Tailwind: { bg: "#06B6D4", text: "text-black" },
  Tailwindcss: { bg: "#06B6D4", text: "text-black" },
  Bootstrap: { bg: "#7952B3", text: "text-white" },
  Astro: { bg: "#FF5D01", text: "text-white" },
  "Next.js": { bg: "#000000", text: "text-white" },
  "Azure DevOps": { bg: "#0078D4", text: "text-white" },
  GitHub: { bg: "#181717", text: "text-white" },
  Git: { bg: "#F05032", text: "text-white" },
  Docker: { bg: "#2496ED", text: "text-white" },
  Vercel: { bg: "#000000", text: "text-white" },
  Mdx: { bg: "#F9A825", text: "text-black" },
  "Clean Code": { bg: "#A4C639", text: "text-black" },
  "Reactive Forms": { bg: "#DD0031", text: "text-white" },
  default: {
    bg: "bg-light-tag-bg dark:bg-dark-tag-bg",
    text: "text-light-text dark:text-dark-text",
  },
};

const hexToRgba = (hex: string, alpha: number = 1): string => {
  let r = 0, g = 0, b = 0;
  const hexValue = hex.startsWith('#') ? hex.slice(1) : hex;
  if (hexValue.length === 3) {
    r = parseInt(hexValue[0] + hexValue[0], 16);
    g = parseInt(hexValue[1] + hexValue[1], 16);
    b = parseInt(hexValue[2] + hexValue[2], 16);
  } else if (hexValue.length === 6) {
    r = parseInt(hexValue.slice(0, 2), 16);
    g = parseInt(hexValue.slice(2, 4), 16);
    b = parseInt(hexValue.slice(4, 6), 16);
  } else {
    return `rgba(0,0,0,0)`;
  }
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const getTechChipStyles = (tech: string) => {
  const normalizedTechKey = Object.keys(techColorMap).find(
    (key) => key.toLowerCase() === tech.toLowerCase() && key !== "default"
  );
  const styleInfo = normalizedTechKey
    ? techColorMap[normalizedTechKey]
    : techColorMap["default"];

  const opacityValue = 0.6; // 60% opacity

  let bgColorStyle = "";
  let bgClass = "";

  if (styleInfo.bg.startsWith("#")) {
    bgColorStyle = `background-color: ${hexToRgba(styleInfo.bg, opacityValue)};`;
  } else {
    bgClass = styleInfo.bg;
  }

  return {
    bgColorStyle: bgColorStyle,
    bgClass: bgClass,
    textClass: styleInfo.text,
  };
};
---

<section id="projects" class="max-w-6xl mx-auto px-6 py-8 md:py-16 scroll-animate scroll-mt-20">
  <div>
    <header class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-12 scroll-animate-fast">
      <h2 class="text-3xl md:text-4xl font-bold text-light-text dark:text-dark-text text-pretty title-animate">
        {title}
      </h2>
    </header>

    <div class="grid gap-12 md:gap-16 stagger-children" id="projects-list">
      {projects.map((project, idx) => (
        <article class={`rounded-lg group project-card-hover ${(!showAll && idx >= initialMaxProjects) ? 'hidden' : ''}`} data-project-idx={idx}>
          <a
            href={project.url}
            target="_blank"
            rel="noopener noreferrer"
            class="block relative"
          >
            
            
            <div class="bg-light-card-bg dark:bg-dark-card-bg rounded-t-lg h-64 md:h-80 mb-6 relative overflow-hidden group-hover:bg-light-border dark:group-hover:bg-dark-border transition-colors">
              {idx === 0 && (
                <span class="absolute bottom-2 right-2 bg-red-600 text-white text-xs font-semibold px-2 py-1 rounded-full z-10">
                  {t.labels.newProject}
                </span>
              )}
              {project.screenshot ? (
                <img
                  src={project.screenshot}
                  alt={`Screenshot of ${project.name}`}
                  class="w-full h-full object-cover object-top transition-all duration-300 group-hover:scale-110 group-hover:brightness-90"
                  loading="lazy"
                />
              ) : (
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="text-light-subtext dark:text-dark-subtext">
                    <svg class="w-20 h-20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                    </svg>
                  </div>
                </div>
              )}
              <div class="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
                <svg class="w-6 h-6 text-light-subtext dark:text-dark-subtext" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                </svg>
              </div>
            </div>
            <div class="p-4 rounded-b-lg">
              <header class="flex items-center justify-between mb-2">
                <h3 class="text-xl font-semibold text-light-text dark:text-dark-text group-hover:text-light-accent dark:group-hover:text-dark-accent transition-colors text-pretty">
                  {project.name}
                </h3>
                <span class="text-sm text-light-subtext dark:text-dark-subtext">
                  {project.year}
                </span>
              </header>
              <p class="text-light-text dark:text-dark-text leading-relaxed text-balance">
                {project.description[currentLocale]}
              </p>
              {project.technologies && project.technologies.length > 0 && (
                <div class="flex flex-wrap gap-2 mt-4">
                  {project.technologies.slice(0, 4).map((tech) => {
                    const styles = getTechChipStyles(tech);
                    return (
                      <span
                        class={`px-3 py-1 text-xs font-medium rounded-md shadow-sm transition-transform duration-200 ease-in-out hover:scale-105 ${styles.textClass} ${styles.bgClass}`}
                        style={styles.bgColorStyle}
                      >
                        {tech}
                      </span>
                    );
                  })}
                </div>
              )}
            </div>
          </a>
        </article>
      ))}
    </div>

    {projects.length > initialMaxProjects && (
      <div class="mt-12 text-center"> 
        <button
          id={showAllId}
          type="button"
          class="px-6 py-3 border border-light-accent dark:border-dark-accent text-light-accent dark:text-dark-accent rounded-md hover:bg-light-accent hover:text-light-card-bg dark:hover:bg-dark-accent dark:hover:text-dark-card-bg transition-colors duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-light-accent dark:focus:ring-dark-accent cursor-pointer"
          aria-expanded={showAll ? "true" : "false"} 
        >
          {buttonText} 
        </button>
      </div>
    )}
    <script is:inline define:vars={{
        initialShowAllState: showAll,
        initialMaxProjects,
        viewAllText: t.actions.viewAll,
        viewLessText: t.actions.viewLess,
        buttonId: showAllId,
        projectsListId: 'projects-list'
    }}>
      document.addEventListener('DOMContentLoaded', function() {
        const btn = document.getElementById(buttonId);
        if (!btn) {
          console.error(`Button with id '${buttonId}' not found`);
          return;
        }

        const projectsContainer = document.getElementById(projectsListId);
        if (!projectsContainer) {
          console.error(`Projects container with id '${projectsListId}' not found`);
          return;
        }
        
        const allProjectCards = Array.from(projectsContainer.querySelectorAll('article[data-project-idx]'));
        let isCurrentlyShowingAll = initialShowAllState;

        function updateButtonAppearance() {
          btn.textContent = isCurrentlyShowingAll ? viewLessText : viewAllText;
          btn.setAttribute('aria-expanded', isCurrentlyShowingAll.toString());
        }

        function updateProjectsVisibility() {
          allProjectCards.forEach((card, idx) => {
            if (isCurrentlyShowingAll || idx < initialMaxProjects) {
              card.classList.remove('hidden');
            } else {
              card.classList.add('hidden');
            }
          });
        }

        btn.addEventListener('click', () => {
          isCurrentlyShowingAll = !isCurrentlyShowingAll;
          
          updateButtonAppearance();
          updateProjectsVisibility();

          // Update URL
          const url = new URL(window.location.href);
          if (isCurrentlyShowingAll) {
            url.searchParams.set('show_all', 'true');
          } else {
            url.searchParams.delete('show_all');
          }
          url.hash = '#projects';
          
          history.pushState({}, '', url.toString());
        });
      });
    </script>
  </div>
</section>
