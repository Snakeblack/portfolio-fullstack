---
import { getTranslations, type Locale } from '../utils/translations';

interface ProjectItem {
  name: string;
  description: { [key: string]: string };
  url?: string; // Made url optional to match data
  technologies?: string[];
  year: string;
  screenshot?: string;
}

interface Props {
  title: string;
  projects: ProjectItem[];
  currentLocale: string;
  viewAllText?: string; // Made optional as it's derived
  maxProjects?: number;
}

const { title, projects, currentLocale, maxProjects: initialMaxProjects = 3 } = Astro.props;
const t = getTranslations(currentLocale as Locale);

const urlParams = new URLSearchParams(Astro.url.search);
const showAll = urlParams.get('show_all') === 'true';

const buttonText = showAll ? t.actions.viewLess : t.actions.viewAll;
const showAllId = `show-all-projects-btn`;

const techColorMap: Record<string, { bg: string; text: string }> = {
  HTML: { bg: "#E34F26", text: "text-white" },
  CSS: { bg: "#1572B6", text: "text-white" },
  JavaScript: { bg: "#F7DF1E", text: "text-black" },
  TypeScript: { bg: "#3178C6", text: "text-white" },
  Angular: { bg: "#DD0031", text: "text-white" },
  React: { bg: "#61DAFB", text: "text-black" },
  ".NET": { bg: "#512BD4", text: "text-white" },
  Java: { bg: "#007396", text: "text-white" },
  "Node.js": { bg: "#339933", text: "text-white" },
  MongoDB: { bg: "#47A248", text: "text-white" },
  "SQL Server": { bg: "#CC2927", text: "text-white" },
  MySQL: { bg: "#4479A1", text: "text-white" }, // Added MySQL from project data
  Firebase: { bg: "#FFCA28", text: "text-black" },
  Tailwind: { bg: "#06B6D4", text: "text-black" },
  Tailwindcss: { bg: "#06B6D4", text: "text-black" },
  Bootstrap: { bg: "#7952B3", text: "text-white" },
  Astro: { bg: "#FF5D01", text: "text-white" },
  "Next.js": { bg: "#000000", text: "text-white" },
  "Azure DevOps": { bg: "#0078D4", text: "text-white" },
  GitHub: { bg: "#181717", text: "text-white" },
  Git: { bg: "#F05032", text: "text-white" },
  Docker: { bg: "#2496ED", text: "text-white" },
  Vercel: { bg: "#000000", text: "text-white" },
  Mdx: { bg: "#F9A825", text: "text-black" },
  "Clean Code": { bg: "#A4C639", text: "text-black" },
  "Reactive Forms": { bg: "#DD0031", text: "text-white" },
  "API GEMINI": { bg: "#4285F4", text: "text-white" }, // Added API GEMINI from project data
  default: {
    bg: "bg-light-tag-bg dark:bg-dark-tag-bg",
    text: "text-light-text dark:text-dark-text",
  },
};

const hexToRgba = (hex: string, alpha: number = 1): string => {
  let r = 0, g = 0, b = 0;
  const hexValue = hex.startsWith('#') ? hex.slice(1) : hex;
  if (hexValue.length === 3) {
    r = parseInt(hexValue[0] + hexValue[0], 16);
    g = parseInt(hexValue[1] + hexValue[1], 16);
    b = parseInt(hexValue[2] + hexValue[2], 16);
  } else if (hexValue.length === 6) {
    r = parseInt(hexValue.slice(0, 2), 16);
    g = parseInt(hexValue.slice(2, 4), 16);
    b = parseInt(hexValue.slice(4, 6), 16);
  } else {
    return `rgba(0,0,0,0)`; // Should not happen with valid hex
  }
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const getTechChipStyles = (tech: string) => {
  const normalizedTechKey = Object.keys(techColorMap).find(
    (key) => key.toLowerCase() === tech.toLowerCase() && key !== "default"
  );
  const styleInfo = normalizedTechKey
    ? techColorMap[normalizedTechKey]
    : techColorMap["default"];

  const opacityValue = 0.7; // Adjusted opacity for better visibility

  let bgColorStyle = "";
  let bgClass = "";

  if (styleInfo.bg.startsWith("#")) {
    bgColorStyle = `background-color: ${hexToRgba(styleInfo.bg, opacityValue)};`;
  } else {
    // For class-based backgrounds, Tailwind's opacity utility (e.g., bg-blue-500/70) is preferred.
    // However, applying it dynamically here is tricky. We'll assume direct classes are fine or adjust if needed.
    bgClass = styleInfo.bg; 
  }

  return {
    bgColorStyle: bgColorStyle,
    bgClass: bgClass,
    textClass: styleInfo.text,
  };
};
---

<section id="projects" class="max-w-6xl mx-auto px-6 py-8 md:py-16 scroll-animate scroll-mt-20">
  <header class="text-center scroll-animate-fast">
    <h2 class="text-3xl md:text-4xl font-bold text-light-text dark:text-dark-text mb-12 md:mb-16 title-animate">
      {title}
    </h2>
  </header>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 stagger-children">
    {projects.map((project, index) => {
      const projectDescription = project.description[currentLocale as keyof typeof project.description] || project.description["en"];
      const isVisibleInitially = index < initialMaxProjects;
      return (        <article 
          class={`project-item ${!showAll && !isVisibleInitially ? 'project-hidden' : 'project-visible'} project-card-hover group bg-light-card-bg dark:bg-dark-card-bg rounded-xl shadow-lg hover:shadow-2xl overflow-hidden flex flex-col transition-all duration-300 ease-in-out relative scroll-animate-fast`}
          style={`transition-delay: ${index * 100}ms;`}
          data-project-index={index}
        >
          {project.screenshot && (
            <div class="relative w-full h-48 overflow-hidden">
              <img 
                src={project.screenshot}
                alt={`Screenshot of ${project.name}`}
                class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105 group-hover:brightness-95"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </div>
          )}
          <div class="p-6 flex flex-col flex-grow">
            <h3 class="text-xl font-semibold text-light-text dark:text-dark-text mb-2">{project.name}</h3>
            <p class="text-sm text-light-subtext dark:text-dark-subtext mb-4 flex-grow text-balance leading-relaxed">
              {projectDescription}
            </p>
            {project.technologies && project.technologies.length > 0 && (
              <div class="mb-4">
                <h4 class="text-xs font-semibold uppercase tracking-wider text-light-subtext dark:text-dark-subtext mb-2">
                  {currentLocale === 'es' ? 'Tecnolog√≠as' : 'Technologies'}
                </h4>
                <div class="flex flex-wrap gap-2">
                  {project.technologies.map(tech => {
                    const { bgColorStyle, bgClass, textClass } = getTechChipStyles(tech);
                    return (
                      <span 
                        style={bgColorStyle}
                        class={`tech-chip ${bgClass} ${textClass} px-3 py-1 rounded-full text-[0.7rem] font-medium shadow-sm transition-all duration-200 ease-in-out transform hover:scale-105`}
                      >
                        {tech}
                      </span>
                    );
                  })}
                </div>
              </div>
            )}
            <div class="mt-auto pt-4 flex items-center justify-between border-t border-light-border/50 dark:border-dark-border/50">
              <span class="text-xs text-light-subtext dark:text-dark-subtext italic">{project.year}</span>
              {project.url && (
                <a 
                  href={project.url} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  aria-label={`View project ${project.name}`}
                  class="inline-flex items-center gap-1.5 text-xs font-medium text-light-accent dark:text-dark-accent hover:text-light-accent-hover dark:hover:text-dark-accent-hover hover:underline transition-colors duration-300 ease-in-out"
                >
                  {currentLocale === 'es' ? 'Ver Proyecto' : 'View Project'}
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                </a>
              )}
            </div>
          </div>
        </article>
      );
    })}
  </div>

  {projects.length > initialMaxProjects && (
    <div class="mt-12 md:mt-16 text-center scroll-animate-fast" style="transition-delay: 0.2s;">
      <a 
        href={showAll ? Astro.url.pathname.split('?')[0] : `${Astro.url.pathname.split('?')[0]}?show_all=true`} 
        id={showAllId}
        class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-light-accent dark:bg-dark-accent hover:bg-light-accent-hover dark:hover:bg-dark-accent-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-light-accent dark:focus:ring-dark-accent transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md hover:shadow-lg"
        role="button"
        aria-pressed={showAll ? "true" : "false"}
      >
        {buttonText}
      </a>
    </div>
  )}
</section>

<script define:vars={{ initialShowAllState: showAll, initialMaxProjects, viewAllText: t.actions.viewAll, viewLessText: t.actions.viewLess, buttonId: showAllId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById(buttonId);
    const projectItems = document.querySelectorAll('.project-item');
    if (!btn || projectItems.length === 0) return;

    let isCurrentlyShowingAll = initialShowAllState;
    
    const updateButtonAndItems = () => {
      btn.textContent = isCurrentlyShowingAll ? viewLessText : viewAllText;
      btn.setAttribute('aria-pressed', isCurrentlyShowingAll.toString());

      projectItems.forEach((item, index) => {
        if (isCurrentlyShowingAll) {
          // Show all projects with animation
          item.classList.remove('project-hidden');
          item.classList.add('project-visible');
          // Add a small delay for staggered animation
          setTimeout(() => {
            item.classList.add('project-animate-in');
          }, index * 50);
        } else {
          // Hide projects beyond initial max
          if (index >= initialMaxProjects) {
            item.classList.remove('project-visible', 'project-animate-in');
            item.classList.add('project-hidden');
          } else {
            item.classList.remove('project-hidden');
            item.classList.add('project-visible', 'project-animate-in');
          }
        }
      });
    };

    // Initial setup based on URL state (Astro already handles this for no-JS, but good for consistency if JS runs late)
    // updateButtonAndItems(); // Astro handles initial render, so this might be redundant or cause a flash

    btn.addEventListener('click', (e) => {
      e.preventDefault(); 
      
      // Disable button temporarily to prevent spam clicking
      btn.style.pointerEvents = 'none';
      
      isCurrentlyShowingAll = !isCurrentlyShowingAll;
      
      const currentUrl = new URL(window.location.href);
      if (isCurrentlyShowingAll) {
        currentUrl.searchParams.set('show_all', 'true');
      } else {
        currentUrl.searchParams.delete('show_all');
      }
      history.pushState({}, '', currentUrl.toString()); 

      updateButtonAndItems(); // Update UI immediately
      
      // Re-enable button after animation completes
      setTimeout(() => {
        btn.style.pointerEvents = 'auto';
      }, 600);
    });
  });
</script>

<style>
  .tech-chip {
    /* Base styles for tech chips */
    line-height: 1.25;
  }
  .project-card-hover:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
  
  /* Project animation styles */
  .project-hidden {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    visibility: hidden;
    height: 0;
    margin: 0;
    overflow: hidden;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .project-visible {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
    height: auto;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .project-animate-in {
    animation: projectFadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  @keyframes projectFadeIn {
    from {
      opacity: 0;
      transform: translateY(30px) scale(0.9);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  /* Ensure smooth grid transitions */
  .grid {
    transition: all 0.3s ease-in-out;
  }
  
  /* Better hover animations */
  .project-card-hover {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .project-card-hover:hover {
    transform: translateY(-8px);
  }
</style>
