---
import type { ExperienceEntry } from '../types/portfolio';

interface Props {
  title: string;
  experience: ExperienceEntry[];
  currentLocale: string;
}

const { title, experience, currentLocale } = Astro.props;
---

<section id="work" class="max-w-6xl mx-auto px-6 py-8 md:py-16 scroll-animate scroll-mt-20">
  <header class="scroll-animate-fast">
    <h2 class="text-3xl md:text-4xl font-bold text-light-text dark:text-dark-text mb-16 text-pretty title-animate">
      {title}
    </h2>
  </header>
  
  <div class="relative pl-4 md:pl-8">
    {/* The actual timeline bar - could be a pseudo-element or a div */}
    <div class="absolute top-0 bottom-0 left-4 md:left-8 w-0.5 bg-light-border dark:bg-dark-border" aria-hidden="true"></div>

    <div class="space-y-12 md:space-y-16">
      {experience.map((job, index) => {
        return (
          <article class="experience-item relative focus-group scroll-animate" data-index={index}>
            <div class="timeline-dot absolute -left-[calc(0.5rem-1px)] md:-left-[calc(1rem-1px)] top-1 w-3 h-3 rounded-full border-2 border-light-bg dark:border-dark-bg bg-light-border dark:bg-dark-border transition-all duration-300 ease-in-out"></div>
            
            <div class="ml-6 md:ml-10 trigger-area cursor-pointer">
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <h3 class="text-lg md:text-xl font-semibold text-light-text dark:text-dark-text transition-opacity duration-300 ease-in-out">
                  {job.company}
                </h3>
                <span class="text-xs md:text-sm text-light-subtext dark:text-dark-subtext mt-0.5 sm:mt-0 transition-opacity duration-300 ease-in-out">
                  {job.period} {/* Use job.period directly */}
                </span>
              </div>
              <p class="text-md md:text-lg text-light-accent dark:text-dark-accent font-medium mt-1 transition-opacity duration-300 ease-in-out">
                {job.position[currentLocale as keyof typeof job.position]} {/* Access localized position */}
              </p>
            </div>

            <div class="details-container ml-6 md:ml-10 mt-3 overflow-hidden max-h-0 opacity-0">
              <p class="text-light-subtext dark:text-dark-subtext leading-relaxed text-balance">
                {job.description[currentLocale as keyof typeof job.description]} {/* Access localized description */}
              </p>
            </div>
          </article>
        )})}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const experienceItems = document.querySelectorAll('.experience-item');

    experienceItems.forEach(item => {
      const trigger = item.querySelector('.trigger-area');

      if (trigger) {
        trigger.setAttribute('role', 'button');
        trigger.setAttribute('tabindex', '0');
        trigger.setAttribute('aria-expanded', 'false');

        const toggleItem = () => {
          const isActive = item.classList.contains('is-active');

          experienceItems.forEach(otherItem => {
            if (otherItem !== item && otherItem.classList.contains('is-active')) {
              otherItem.classList.remove('is-active');
              otherItem.querySelector('.trigger-area')?.setAttribute('aria-expanded', 'false');
            }
          });

          if (isActive) {
            item.classList.remove('is-active');
            trigger.setAttribute('aria-expanded', 'false');
          } else {
            item.classList.add('is-active');
            trigger.setAttribute('aria-expanded', 'true');
          }

          const anyItemActive = document.querySelector('.experience-item.is-active');
          if (anyItemActive) {
            document.body.classList.add('experience-item-active-global');
          } else {
            document.body.classList.remove('experience-item-active-global');
          }
        };

        trigger.addEventListener('click', toggleItem);
        trigger.addEventListener('keydown', (event) => {
          const keyboardEvent = event as KeyboardEvent;
          if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {
            keyboardEvent.preventDefault();
            toggleItem();
          }
        });
      }
    });
  });
</script>

<style>
  .focus-group .trigger-area h3,
  .focus-group .trigger-area span,
  .focus-group .trigger-area p {
    transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out;
  }

  .details-container {
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1), 
                opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1), 
                margin-top 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Active state for the clicked item */
  .experience-item.is-active .timeline-dot {
    background-color: var(--color-light-accent);
    border-color: var(--color-light-accent);
    transform: scale(1.25);
  }
  .dark .experience-item.is-active .timeline-dot {
    background-color: var(--color-dark-accent);
    border-color: var(--color-dark-accent);
  }
  .experience-item.is-active .details-container {
    max-height: 20rem; /* Adjust as needed */
    opacity: 1;
    margin-top: 0.75rem; /* Tailwind mt-3 */
  }

  /* Styling for when ANY experience item is active (focused state for others) */
  .experience-item-active-global .experience-item:not(.is-active) .focus-group .trigger-area h3,
  .experience-item-active-global .experience-item:not(.is-active) .focus-group .trigger-area span,
  .experience-item-active-global .experience-item:not(.is-active) .focus-group .trigger-area p {
    opacity: 0.5;
    /* transform: translateX(-5px) scale(0.98); Optional: makes it recede */
  }
  
  .experience-item-active-global .experience-item:not(.is-active) .timeline-dot {
     opacity: 0.6;
  }

  /* Subtle hover on trigger area for affordance */
  .experience-item .trigger-area:hover .timeline-dot {
    border-color: var(--color-light-accent);
  }
  .dark .experience-item .trigger-area:hover .timeline-dot {
    border-color: var(--color-dark-accent);
  }
  body:not(.experience-item-active-global) .experience-item .trigger-area:hover h3,
  body:not(.experience-item-active-global) .experience-item .trigger-area:hover span,
  body:not(.experience-item-active-global) .experience-item .trigger-area:hover p {
    opacity: 0.85;
  }
  .experience-item.is-active .trigger-area:hover h3,
  .experience-item.is-active .trigger-area:hover span,
  .experience-item.is-active .trigger-area:hover p {
     opacity: 0.85;
  }

</style>
