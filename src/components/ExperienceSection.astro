---
interface ExperienceJob {
  company: string;
  position: { [key: string]: string };
  period: string;
  description: { [key: string]: string };
}

interface Props {
  title: string;
  experience: ExperienceJob[];
  currentLocale: string;
}

const { title, experience, currentLocale } = Astro.props;
---

<section id="work" class="max-w-6xl mx-auto px-6 py-8 md:py-16 scroll-animate scroll-mt-20">
  <div class="max-w-4xl">
    <header class="scroll-animate-fast">
      <h2 class="text-3xl md:text-4xl font-bold text-light-text dark:text-dark-text mb-12 text-pretty title-animate">
        {title}
      </h2>
    </header>
    
    <div class="space-y-12">
      {experience.map((job) => (
        <article class="relative pl-8 border-l-2 border-light-border dark:border-dark-border experience-item opacity-0 transform translate-y-10 transition-all duration-500 ease-out">
          <div class="absolute -left-2 top-0 w-4 h-4 bg-light-accent dark:bg-dark-accent rounded-full"></div>
          
          <header class="flex flex-col md:flex-row md:items-center md:justify-between mb-3">
            <div>
              <h3 class="text-xl font-semibold text-light-text dark:text-dark-text text-pretty">
                {job.position[currentLocale]}
              </h3>
              <p class="text-light-accent dark:text-dark-accent font-medium text-pretty">
                {job.company}
              </p>
            </div>
            <span class="text-sm text-light-subtext dark:text-dark-subtext mt-1 md:mt-0">
              {job.period}
            </span>
          </header>
          
          <p class="text-light-subtext dark:text-dark-subtext leading-relaxed mb-4 text-balance">
            {job.description[currentLocale]}
          </p>
        </article>
      ))}
    </div>
  </div>
</section>

<script>
  const experienceItems = document.querySelectorAll('.experience-item');

  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('opacity-100', 'translate-y-0');
        entry.target.classList.remove('opacity-0', 'translate-y-10');
      } else {
        entry.target.classList.add('opacity-0', 'translate-y-10');
        entry.target.classList.remove('opacity-100', 'translate-y-0');
      }
    });
  }, observerOptions);

  experienceItems.forEach(item => {
    // Initialize items as hidden
    item.classList.add('opacity-0', 'translate-y-10');
    observer.observe(item);
  });
</script>
